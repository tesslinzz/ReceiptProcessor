{
	"info": {
		"_postman_id": "32754f6c-cd92-4462-97af-4545e422cbe9",
		"name": "Receipt Processor API Documentation",
		"description": "### Overview:\n\nThe **Receipt Processor API** is a lightweight RESTful service designed to process receipts, calculate points based on predefined rules, and retrieve points for a specific receipt. Built with Go and the Gin framework, the API offers a simple and efficient way to handle receipt data and manage unique receipt IDs.\n\n- Submit a receipt to calculate points and save it on the server.\n    \n- Retrieve the reward points for a submitted receipt using a unique ID.\n    \n\n## **Getting started**\n\n**Install Go:** Ensure Go is installed on your system.\n\n**Start the server:** Run `go run main.go` in your project directory. The server will start at `http://localhost:8000`.\n\n**Explore endpoints:** Use tools like Postman to interact with the following endpoints:\n\n- `POST /receipts/process` to submit a receipt.\n    \n- `GET /receipts/{id}/points` to retrieve points by receipt ID.\n    \n\n**Test the API:** Submit sample requests using JSON payloads (examples provided below).",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "40829306"
	},
	"item": [
		{
			"name": "Start application",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8000",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000"
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "Post correct receipt",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"retailer\": \"Walgreens\",\n    \"purchaseDate\": \"2022-01-02\",\n    \"purchaseTime\": \"08:13\",\n    \"total\": \"2.60\",\n    \"items\": [\n        {\"shortDescription\": \"Pepsi - 12-oz\", \"price\": \"1.25\"},\n        {\"shortDescription\": \"Dasani\", \"price\": \"1.40\"}\n    ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8000/receipts/process",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"receipts",
						"process"
					]
				},
				"description": "**Description:** Submits a receipt for processing.\n\n**Input:** JSON receipt.\n\n**Output:** A unique string ID representing the receipt."
			},
			"response": []
		},
		{
			"name": "Get points for correct receipt",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8000/receipts/88eaff195b6dd0fa8dd2f13f860c4aa35e75e091416689de6e03695e0f8cbf99/points",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"receipts",
						"88eaff195b6dd0fa8dd2f13f860c4aa35e75e091416689de6e03695e0f8cbf99",
						"points"
					]
				},
				"description": "**Description:** Retrieves the points awarded for a submitted receipt.\n\n**Input:** The unique receipt ID in the URL path.\n\n**Output:** The total points calculated for the receipt."
			},
			"response": []
		},
		{
			"name": "Post empty receipt",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8000/receipts/process",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"receipts",
						"process"
					]
				},
				"description": "This is a POST request for a case, when the receipt is empty"
			},
			"response": []
		},
		{
			"name": "Post wrong data type receipt",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"retailer\": \"Walgreens\",\n    \"purchaseDate\": \"2022-01-02\",\n    \"purchaseTime\": \"234\",\n    \"total\": \"2.60\",\n    \"items\": [\n        {\"shortDescription\": \"Pepsi - 12-oz\", \"price\": \"1.25\"},\n        {\"shortDescription\": \"Dasani\", \"price\": \"1.40\"}\n    ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8000/receipts/process",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"receipts",
						"process"
					]
				},
				"description": "This is a POST request for a case, when the receipt have wrong date type for purchaseTime"
			},
			"response": []
		},
		{
			"name": "Post missing field receipt Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"retailer\": \"Walgreens\",\n    \"purchaseDate\": \"2022-01-02\",\n    \"total\": \"2.60\",\n    \"items\": [\n        {\"shortDescription\": \"Pepsi - 12-oz\", \"price\": \"1.25\"},\n        {\"shortDescription\": \"Dasani\", \"price\": \"1.40\"}\n    ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8000/receipts/process",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"receipts",
						"process"
					]
				},
				"description": "This is a POST request for a case, when the receipt have missing the purchaseTime field"
			},
			"response": []
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "key",
				"value": "X-API-Key",
				"type": "string"
			},
			{
				"key": "value",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://farming-simulator.pstmn.io"
		}
	]
}